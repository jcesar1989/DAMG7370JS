{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ls_snowflake_pet",
						"type": "DatasetReference"
					},
					"name": "stagepet"
				},
				{
					"dataset": {
						"referenceName": "ls_snowflake_pet",
						"type": "DatasetReference"
					},
					"name": "BreedDim"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "BreedID"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LICENSE_ID as decimal(38,0),",
				"          LICENSE_ISSUE_DATE as date,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          LOAD_TIMESTAMP as timestamp,",
				"          SOURCE_FILE_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select * from STAGE.PET_LICENSE\\n',",
				"     format: 'query') ~> stagepet",
				"source(output(",
				"          BREED_KEY as decimal(38,0),",
				"          BREED_ID as string,",
				"          SPECIES_NAME as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          LOAD_TIMESTAMP as timestamp,",
				"          SOURCE_FILE_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'Select * from DW.BREED_DIM',",
				"     format: 'query') ~> BreedDim",
				"BreedID aggregate(groupBy(BREED_ID),",
				"     SPECIES = first(SPECIES),",
				"          PRIMARY_BREED = first(PRIMARY_BREED),",
				"          SECONDARY_BREED = first(SECONDARY_BREED),",
				"          SOURCE_FILE_NAME = first(SOURCE_FILE_NAME),",
				"          LOAD_TIMESTAMP = first(LOAD_TIMESTAMP)) ~> aggregate1",
				"stagepet derive(BREED_ID = sha2(256, concat(     coalesce(SPECIES, ''),     '-',     coalesce(PRIMARY_BREED, ''),     '-',     coalesce(SECONDARY_BREED, '') ))) ~> BreedID"
			]
		}
	}
}