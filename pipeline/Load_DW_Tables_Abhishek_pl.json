{
	"name": "Load_DW_Tables_Abhishek_pl",
	"properties": {
		"activities": [
			{
				"name": "Load_DIM_DATE",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 2,
					"retryIntervalInSeconds": 60,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_snow_pet",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "USE SCHEMA DW;\r\nMERGE INTO DATE_DIM AS tgt\r\nUSING (\r\n    WITH DATE_RANGE AS (\r\n        SELECT \r\n            DATEADD(DAY, SEQ4(), '2010-01-01')::DATE AS FULL_DATE\r\n        FROM TABLE(GENERATOR(ROWCOUNT => 7305))  -- 20 years of dates (2010-2030)\r\n    )\r\n    SELECT \r\n        TO_NUMBER(TO_CHAR(FULL_DATE, 'YYYYMMDD')) AS DATE_KEY,\r\n        FULL_DATE,\r\n        DAYOFWEEK(FULL_DATE) AS DAY_OF_WEEK,\r\n        DAYNAME(FULL_DATE) AS DAY_NAME,\r\n        DAY(FULL_DATE) AS DAY_OF_MONTH,\r\n        DAYOFYEAR(FULL_DATE) AS DAY_OF_YEAR,\r\n        WEEKOFYEAR(FULL_DATE) AS WEEK_OF_YEAR,\r\n        MONTH(FULL_DATE) AS MONTH_NUMBER,\r\n        MONTHNAME(FULL_DATE) AS MONTH_NAME,\r\n        TO_CHAR(FULL_DATE, 'MON') AS MONTH_ABBR,\r\n        QUARTER(FULL_DATE) AS QUARTER,\r\n        CONCAT('Q', QUARTER(FULL_DATE)) AS QUARTER_NAME,\r\n        YEAR(FULL_DATE) AS YEAR,\r\n        CASE \r\n            WHEN MONTH(FULL_DATE) >= 7 THEN YEAR(FULL_DATE) + 1\r\n            ELSE YEAR(FULL_DATE)\r\n        END AS FISCAL_YEAR,\r\n        CASE WHEN DAYOFWEEK(FULL_DATE) IN (0, 6) THEN TRUE ELSE FALSE END AS IS_WEEKEND,\r\n        FALSE AS IS_HOLIDAY  -- Update manually or with holiday logic\r\n    FROM DATE_RANGE\r\n) AS src\r\nON tgt.DATE_KEY = src.DATE_KEY\r\nWHEN NOT MATCHED THEN\r\n    INSERT (\r\n        DATE_KEY,\r\n        FULL_DATE,\r\n        DAY_OF_WEEK,\r\n        DAY_NAME,\r\n        DAY_OF_MONTH,\r\n        DAY_OF_YEAR,\r\n        WEEK_OF_YEAR,\r\n        MONTH_NUMBER,\r\n        MONTH_NAME,\r\n        MONTH_ABBR,\r\n        QUARTER,\r\n        QUARTER_NAME,\r\n        YEAR,\r\n        FISCAL_YEAR,\r\n        IS_WEEKEND,\r\n        IS_HOLIDAY,\r\n        LOAD_TIMESTAMP,\r\n        SOURCE_FILE_NAME\r\n    )\r\n    VALUES (\r\n        src.DATE_KEY,\r\n        src.FULL_DATE,\r\n        src.DAY_OF_WEEK,\r\n        src.DAY_NAME,\r\n        src.DAY_OF_MONTH,\r\n        src.DAY_OF_YEAR,\r\n        src.WEEK_OF_YEAR,\r\n        src.MONTH_NUMBER,\r\n        src.MONTH_NAME,\r\n        src.MONTH_ABBR,\r\n        src.QUARTER,\r\n        src.QUARTER_NAME,\r\n        src.YEAR,\r\n        src.FISCAL_YEAR,\r\n        src.IS_WEEKEND,\r\n        src.IS_HOLIDAY,\r\n        CURRENT_TIMESTAMP(),\r\n        'ADF_DATE_DIM_LOAD'\r\n    );\r\n\r\n"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Load_LOCATION_DIM",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Load_DIM_DATE",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 2,
					"retryIntervalInSeconds": 60,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_snow_pet",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "TRUNCATE TABLE PET_DB.DW.LOCATION_DIM;\n\nINSERT INTO PET_DB.DW.LOCATION_DIM\n(\n    LOCATION_ID,\n    STATE_FIPS,\n    STATE_ABBR,\n    STATE,\n    ZIPCODE,\n    COUNTY,\n    CITY,\n    LOAD_TIMESTAMP,\n    SOURCE_FILE_NAME\n)\nSELECT DISTINCT\n    CONCAT('53-', S.ZIP_CODE)             AS LOCATION_ID,       -- 53 = Washington FIPS\n    53                                   AS STATE_FIPS,\n    'WA'                                 AS STATE_ABBR,\n    'Washington'                         AS STATE,\n    S.ZIP_CODE                           AS ZIPCODE,\n    'King'                               AS COUNTY,\n    'Seattle'                            AS CITY,               -- City is known for this dataset\n    CURRENT_TIMESTAMP()                  AS LOAD_TIMESTAMP,     -- Tracks ETL load time\n    'Seattle_Pet_Licenses_20251015.csv'  AS SOURCE_FILE_NAME    -- Source tracking\nFROM PET_DB.STAGE.PET_LICENSE S\nWHERE S.ZIP_CODE IS NOT NULL;\n"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Load_BREED_DIM",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Load_LOCATION_DIM",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 2,
					"retryIntervalInSeconds": 60,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_snow_pet",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "MERGE INTO PET_DB.DW.BREED_DIM AS TGT\r\nUSING (\r\n    SELECT DISTINCT\r\n        CONCAT(SPECIES, '-', PRIMARY_BREED, '-', COALESCE(SECONDARY_BREED, 'NA')) AS BREED_ID,\r\n        SPECIES,\r\n        PRIMARY_BREED,\r\n        SECONDARY_BREED,\r\n        LOAD_TIMESTAMP,\r\n        'Seattle_Pet_Licenses_20251015.csv' AS SOURCE_FILE_NAME\r\n    FROM PET_DB.STAGE.PET_LICENSE\r\n    WHERE PRIMARY_BREED IS NOT NULL\r\n) AS SRC\r\nON TGT.BREED_ID = SRC.BREED_ID\r\n\r\nWHEN MATCHED THEN UPDATE SET\r\n    TGT.SPECIES = SRC.SPECIES,\r\n    TGT.PRIMARY_BREED = SRC.PRIMARY_BREED,\r\n    TGT.SECONDARY_BREED = SRC.SECONDARY_BREED,\r\n    TGT.SOURCE_FILE_NAME = SRC.SOURCE_FILE_NAME,\r\n    TGT.LOAD_TIMESTAMP = SRC.LOAD_TIMESTAMP\r\n\r\nWHEN NOT MATCHED THEN\r\n    INSERT (\r\n        BREED_ID,\r\n        SPECIES,\r\n        PRIMARY_BREED,\r\n        SECONDARY_BREED,\r\n        LOAD_TIMESTAMP,\r\n        SOURCE_FILE_NAME\r\n    )\r\n    VALUES (\r\n        SRC.BREED_ID,\r\n        SRC.SPECIES,\r\n        SRC.PRIMARY_BREED,\r\n        SRC.SECONDARY_BREED,\r\n        SRC.LOAD_TIMESTAMP,\r\n        SRC.SOURCE_FILE_NAME\r\n    );\r\n"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Load_PETLICENSE_FACT",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Load_BREED_DIM",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 2,
					"retryIntervalInSeconds": 60,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_snow_pet",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "MERGE INTO PET_DB.DW.PETLICENSE_FACT AS TGT\r\nUSING (\r\n    SELECT *\r\n    FROM (\r\n        SELECT\r\n            S.LICENSE_NUMBER,\r\n            D.DATE_KEY AS LICENSE_ISSUE_DATE_KEY,\r\n            B.BREED_KEY,\r\n            L.LOCATION_KEY,\r\n            1 AS LICENSE_COUNT,\r\n            S.LOAD_TIMESTAMP,\r\n            'Seattle_Pet_Licenses_20251015.csv' AS SOURCE_FILE_NAME,\r\n            ROW_NUMBER() OVER (PARTITION BY S.LICENSE_NUMBER ORDER BY S.LICENSE_NUMBER) AS rn\r\n        FROM PET_DB.STAGE.PET_LICENSE AS S\r\n        LEFT JOIN PET_DB.DW.DATE_DIM AS D\r\n            ON D.FULL_DATE = TO_DATE(S.LICENSE_ISSUE_DATE, 'MMMM DD, YYYY')\r\n        LEFT JOIN PET_DB.DW.BREED_DIM AS B\r\n            ON B.PRIMARY_BREED = S.PRIMARY_BREED\r\n           AND (B.SECONDARY_BREED = S.SECONDARY_BREED OR B.SECONDARY_BREED IS NULL)\r\n           AND B.SPECIES = S.SPECIES\r\n        LEFT JOIN PET_DB.DW.LOCATION_DIM AS L\r\n            ON TO_VARCHAR(L.ZIPCODE) = TRIM(S.ZIP_CODE)\r\n    )\r\n    QUALIFY rn = 1               -- keep one record per license number\r\n      AND LOCATION_KEY IS NOT NULL\r\n) AS SRC\r\nON TGT.LICENSE_NUMBER = SRC.LICENSE_NUMBER\r\nWHEN MATCHED THEN UPDATE SET\r\n    TGT.LICENSE_ISSUE_DATE_KEY = SRC.LICENSE_ISSUE_DATE_KEY,\r\n    TGT.BREED_KEY = SRC.BREED_KEY,\r\n    TGT.LOCATION_KEY = SRC.LOCATION_KEY,\r\n    TGT.LICENSE_COUNT = SRC.LICENSE_COUNT,\r\n    TGT.LOAD_TIMESTAMP = SRC.LOAD_TIMESTAMP,\r\n    TGT.SOURCE_FILE_NAME = SRC.SOURCE_FILE_NAME\r\nWHEN NOT MATCHED THEN\r\nINSERT (\r\n    LICENSE_NUMBER,\r\n    LICENSE_ISSUE_DATE_KEY,\r\n    BREED_KEY,\r\n    LOCATION_KEY,\r\n    LICENSE_COUNT,\r\n    LOAD_TIMESTAMP,\r\n    SOURCE_FILE_NAME\r\n)\r\nVALUES (\r\n    SRC.LICENSE_NUMBER,\r\n    SRC.LICENSE_ISSUE_DATE_KEY,\r\n    SRC.BREED_KEY,\r\n    SRC.LOCATION_KEY,\r\n    SRC.LICENSE_COUNT,\r\n    SRC.LOAD_TIMESTAMP,\r\n    SRC.SOURCE_FILE_NAME\r\n);\r\n"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"folder": {
			"name": "Team_Project_Pet/PL_Test_Abhishek"
		},
		"annotations": []
	}
}